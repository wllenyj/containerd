syntax = "proto3";

package containerd.services.sandbox.v1;

import weak "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/containerd/containerd/api/services/sandbox/v1;sandbox";

// Instance represents a sandbox instance.
message Instance {
	string id = 1;
	google.protobuf.Any spec = 2;
	map<string, string> labels  = 3 [(gogoproto.nullable) = false];
	google.protobuf.Timestamp created_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
	google.protobuf.Timestamp updated_at = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
	map<string, google.protobuf.Any> extensions = 6 [(gogoproto.nullable) = false];
}

message Status {
	string id = 1;
	uint32 pid = 2;
	string state = 3;
	string version = 4;
	map<string, google.protobuf.Any> extra = 5 [(gogoproto.nullable) = false];
}

message Descriptor {
	Instance instance = 1;
}

service Controller {
	rpc Start(ControllerStartRequest) returns (ControllerStartResponse);
	rpc Stop(ControllerStopRequest) returns (ControllerStopResponse);
	rpc Update(ControllerUpdateRequest) returns (ControllerUpdateResponse);
	rpc Status(ControllerStatusRequest) returns (ControllerStatusResponse);
	rpc Delete(ControllerDeleteRequest) returns (ControllerDeleteResponse);
}

message ControllerStartRequest {
	Instance instance = 1;
}

message ControllerStartResponse {
	Instance instance = 1;
}

message ControllerStopRequest {
	Instance instance = 1;
}

message ControllerStopResponse {
	Instance instance = 1;
}

message ControllerUpdateRequest {
	Instance instance = 1;
	repeated string fields = 2;
}

message ControllerUpdateResponse {
	Instance instance = 1;
}

message ControllerStatusRequest {
	Instance instance = 1;
}

message ControllerStatusResponse {
	Status status = 1;
}

message ControllerDeleteRequest {
	Instance instance = 1;
}

message ControllerDeleteResponse {}

service Store {
	rpc Start(StoreStartRequest) returns (StoreStartResponse);
	rpc Stop(StoreStopRequest) returns (StoreStopResponse);
	rpc Update(StoreUpdateRequest) returns (StoreUpdateResponse);
	rpc Find(StoreFindRequest) returns (StoreFindResponse);
	rpc Status(StoreStatusRequest) returns (StoreStatusResponse);
	rpc List(StoreListRequest) returns (StoreListResponse);
	rpc Delete(StoreDeleteRequest) returns (StoreDeleteResponse);
}

message StoreStartRequest {
	string name = 1;
	Instance instance = 2;
}

message StoreStartResponse {
	Instance instance = 1;
}

message StoreStopRequest {
	string name = 1;
	string id = 2;
}

message StoreStopResponse {}

message StoreUpdateRequest {
	string name = 1;
	Instance instance = 2;
	repeated string fields = 3;
}

message StoreUpdateResponse {
	Instance instance = 1;
}

message StoreFindRequest {
	string name = 1;
	string id = 2;
}

message StoreFindResponse {
	Instance info = 1;
}

message StoreStatusRequest {
	string name = 1;
	string id = 2;
}

message StoreStatusResponse {
	Status status = 1;
}

message StoreListRequest {
	string name = 1;
	repeated string filters = 2;
}

message StoreListResponse {
	repeated Instance info = 1;
}

message StoreDeleteRequest {
	string name = 1;
	string id = 2;
}

message StoreDeleteResponse {}
